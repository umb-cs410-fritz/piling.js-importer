{"version":3,"sources":["piling-example.js","App.js","serviceWorker.js","index.js"],"names":["piling","items","create","el","state","Object","keys","length","piles","get","importState","itemRenderer","createImageRenderer","createLibraryAsync","renderer","darkMode","then","res","App","useState","setState","pilingInitHandler","useCallback","element","a","console","info","version","destroy","settingsInput","React","createRef","className","href","target","rel","type","accept","ref","onClick","e","preventDefault","file","update","reader","FileReader","addEventListener","log","result","settings","JSON","parse","readAsText","alert","readSettings","current","files","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kNAyCIA,E,gGAjCEC,EAAQ,CACZ,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,mCAEP,CACA,IAAO,oCAMIC,EAAS,SAACC,EAAIC,GACzB,GAAiC,IAA9BC,OAAOC,KAAKF,GAAOG,OAAc,CAClC,IAAMC,EAAQR,EAAOS,IAAI,SACnBR,EAAQD,EAAOS,IAAI,SACzBT,EAAOU,YAAP,2BAAuBN,GAAvB,IAA8BI,QAAOP,QAAOU,aAAcC,sBAE1DZ,EAASa,YAAmBV,EAAI,CAC9BW,SAAUF,cACVX,QACAc,UAAU,IACTC,MAAK,SAAAC,GACNjB,EAASiB,KAGb,OAAOjB,GCpDM,SAASkB,IAAO,IAAD,EACFC,mBAAS,IADP,mBACrBf,EADqB,KACdgB,EADc,KAEtBC,EAAoBC,sBAAW,uCAAC,WAAOC,GAAP,eAAAC,EAAA,yDAC/BD,EAD+B,wDAE9BvB,EAASE,EAAOqB,EAASnB,GAC/BqB,QAAQC,KAAR,qBAA2B1B,EAAO2B,UAHE,mBAI7B,kBAAM3B,EAAO4B,aAJgB,2CAAD,sDAKlC,CAACxB,IAEEyB,EAAgBC,IAAMC,YAE5B,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uEAC4C,IAC1C,uBACEA,UAAU,WACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAJN,aAOK,IATP,mBAYA,yBAAKH,UAAU,aACb,kDAEE,2BAAOI,KAAK,OAAOC,OAAO,QAAQC,IAAKT,KAEzC,4BAAQU,QAAS,SAACC,GAChBA,EAAEC,iBAad,SAAsBC,EAAMC,GAC1B,GAAID,GAAuB,sBAAdA,EAAKN,KAEX,CACL,IAAMQ,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,SAAS,SAACN,GAChCf,QAAQsB,IAAI,sBAAuBP,EAAEN,OAAOc,WAE9CJ,EAAOE,iBAAiB,QAAQ,SAACN,GAC/B,IAAMS,EAAWC,KAAKC,MAAMX,EAAEN,OAAOc,QACrCL,EAAOM,MAETL,EAAOQ,WAAWV,QAVlBW,MAAM,sCAdEC,CAAazB,EAAc0B,QAAQC,MAAM,GAAIpC,KAF/C,UAMJ,0BACEY,UAAU,qBACVM,IAAKjB,KChCOoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.ff176596.chunk.js","sourcesContent":["import {\r\n  //createLibrary,\r\n  //createLibraryFromState,\r\n  createImageRenderer,\r\n  createLibraryAsync\r\n} from 'piling.js';\r\n\r\n// prettier-ignore\r\nconst items = [\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/u9CuYen.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/vpl3gXx.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/pGvZTan.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/aixQGmV.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/RXnfMyC.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/Lp0ZNxW.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/EUvVhoO.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/mlsTZ8H.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/kYPFr6p.jpg\"\r\n\t},\r\n  {\r\n\t\t\"src\": \"https://i.imgur.com/gaOAias.jpg\"\r\n\t}\r\n];\r\n\r\nlet piling;\r\n\r\nexport const create = (el, state) => {\r\n  if(Object.keys(state).length !== 0) {\r\n    const piles = piling.get(\"piles\");\r\n    const items = piling.get(\"items\");\r\n    piling.importState({...state, piles, items, itemRenderer: createImageRenderer()});\r\n  } else {\r\n    piling = createLibraryAsync(el, {\r\n      renderer: createImageRenderer(),\r\n      items,\r\n      darkMode: false,\r\n    }).then(res => {\r\n      piling = res;\r\n    });\r\n  }\r\n  return piling;\r\n};\r\n","import React, { useCallback, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport { create } from './piling-example.js';\r\n\r\nexport default function App() {\r\n  const [state, setState] = useState({});\r\n  const pilingInitHandler = useCallback(async (element) => {\r\n    if (!element) return;\r\n    const piling = create(element, state);\r\n    console.info(`Piling.js v${piling.version}`);\r\n    return () => piling.destroy();\r\n  }, [state]);\r\n\r\n  const settingsInput = React.createRef();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          A simple example demonstrating how to use{' '}\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://github.com/flekschas/piling.js\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Piling.js\r\n          </a>{' '}\r\n          in a React app.\r\n        </p>\r\n        <div className='uploaders'>\r\n          <label>\r\n            Upload Settings:\r\n            <input type=\"file\" accept=\".json\" ref={settingsInput} />\r\n          </label>\r\n          <button onClick={(e)=>{\r\n            e.preventDefault();\r\n            readSettings(settingsInput.current.files[0], setState);\r\n          }}>Load</button>\r\n        </div>\r\n      </header>\r\n      <main\r\n        className=\"App-piling-wrapper\"\r\n        ref={pilingInitHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction readSettings(file, update) {\r\n  if(!file || !file.type === \"application/json\") {\r\n    alert(\"Please select a JSON file to load.\");\r\n  } else {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('error', (e) => {\r\n      console.log(\"Error loading file:\", e.target.result);\r\n    });\r\n    reader.addEventListener('load', (e) => {\r\n      const settings = JSON.parse(e.target.result);\r\n      update(settings);\r\n    });\r\n    reader.readAsText(file);\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}